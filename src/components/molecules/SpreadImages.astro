---
interface Props {
  topLeftSrc: string
  topRightSrc: string
  centerSrc: string
  bottomLeftSrc: string
  bottomRightSrc: string
  loading?: 'eager' | 'lazy'
  class?: string
}

const {
  topLeftSrc,
  topRightSrc,
  centerSrc,
  bottomLeftSrc,
  bottomRightSrc,
  loading = 'eager',
  class: className,
} = Astro.props

const images = [
  {
    src: topLeftSrc,
    imgCss: 'w-4/5 -top-1/4 -left-3/4',
  },
  {
    src: topRightSrc,
    imgCss: 'w-2/4 top-4 -right-2/4',
  },
  {
    src: bottomLeftSrc,
    imgCss: 'w-5/6 -bottom-1/4 -left-2/3',
  },
  {
    src: bottomRightSrc,
    imgCss: 'w-4/6 -bottom-1/4 -right-2/3',
  },
  {
    src: centerSrc,
    imgCss: 'w-full top-0 left-0',
  },
]
---

<div
  class='w-full h-auto aspect-square flex justify-center items-center'
  class:list={className}
>
  <div class='spread-container w-1/3 h-auto aspect-portrait relative'>
    {images.map(({ src, imgCss }) => (
      <div
        class='absolute h-auto aspect-portrait'
        class:list={imgCss}
      >
        <picture>
          <img
            src={src}
            alt=''
            loading={loading}
            class='w-full h-auto aspect-portrait object-cover object-center'
          />
        </picture>
      </div>
    ))}
  </div>
</div>

<style>
  .spread-container div:nth-child(1) {
    animation: spreadTopLeft both;
    animation-timeline: view();
    animation-direction: reverse;
    animation-range: entry 10% cover 60%;
  }

  .spread-container div:nth-child(2) {
    animation: spreadTopRight both;
    animation-timeline: view();
    animation-direction: reverse;
    animation-range: entry 10% cover 50%;
  }

  .spread-container div:nth-child(3) {
    animation: spreadBottomLeft both;
    animation-timeline: view();
    animation-direction: reverse;
    animation-range: entry 0% cover 30%;
  }

  .spread-container div:nth-child(4) {
    animation: spreadBottomRight both;
    animation-timeline: view();
    animation-direction: reverse;
    animation-range: entry 0% cover 25%;
  }

  @keyframes spreadTopLeft {
    to {
      top: 0;
      left: 0;
      scale: 0.85;
    }
  }

  @keyframes spreadTopRight {
    to {
      top: 0;
      right: 0;
      scale: 0.85;
    }
  }

  @keyframes spreadBottomLeft {
    to {
      bottom: 0;
      left: 0;
      scale: 0.85;
    }
  }

  @keyframes spreadBottomRight {
    to {
      bottom: 0;
      right: 0;
      scale: 0.85;
    }
  }
</style>
